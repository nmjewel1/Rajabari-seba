
require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const admin = require('firebase-admin');

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

admin.initializeApp({
  credential: admin.credential.applicationDefault(),
  databaseURL: process.env.DATABASE_URL
});

const db = admin.database();

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const welcome = `ЁЯМЯ рж╕рзНржмрж╛ржЧрждржо рж░рж╛ржЬржмрж╛рзЬрзА ржЬрзЗрж▓рж╛ рж╕рзЗржмрж╛ ржмржЯрзЗ ЁЯМЯ

ржЖржкржирж┐ ржирж┐ржЪрзЗрж░ ржХржорж╛ржирзНржбржЧрзБрж▓рзЛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░рзЗржи:
ЁЯй╕ /blood [ржЧрзНрж░рзБржк] тЮд рж░ржХрзНрждржжрж╛рждрж╛ рждрж╛рж▓рж┐ржХрж╛
ЁЯЪС /ambulance тЮд ржПржорзНржмрзБрж▓рзЗржирзНрж╕ рждрж╛рж▓рж┐ржХрж╛
ЁЯПе /hospital тЮд рж╣рж╛рж╕ржкрж╛рждрж╛рж▓ ржУ ржХрзНрж▓рж┐ржирж┐ржХ
ЁЯСитАНтЪХя╕П /doctor тЮд ржбрж╛ржХрзНрждрж╛рж░ржжрзЗрж░ рждржерзНржп
ЁЯСо /police тЮд ржкрзБрж▓рж┐рж╢ рж╣ржЯрж▓рж╛ржЗржи
ЁЯФе /fire тЮд ржлрж╛рзЯрж╛рж░ рж╕рж╛рж░рзНржнрж┐рж╕
ЁЯУж /delivery тЮд ржХрзБрж░рж┐рзЯрж╛рж░ рж╕рж╛рж░рзНржнрж┐рж╕
ЁЯН┤ /restaurant тЮд рж╣рзЛржЯрзЗрж▓-рж░рзЗрж╕рзНржЯрзБрж░рзЗржирзНржЯ
ЁЯТК /pharmacy тЮд ржлрж╛рж░рзНржорзЗрж╕рзА
тЪб /electricity тЮд ржмрж┐ржжрзНржпрзБрзО ржЕржлрж┐рж╕
ЁЯУЮ /help тЮд рж╕рж╛рж╣рж╛ржпрзНржп`;

  bot.sendMessage(chatId, welcome);
});

bot.onText(/\/blood (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const bloodGroup = match[1].trim().toUpperCase();
  const snapshot = await db.ref('BloodDonor').once('value');
  const data = snapshot.val();
  let result = `ЁЯй╕ *${bloodGroup} ржЧрзНрж░рзБржкрзЗрж░ рж░ржХрзНрждржжрж╛рждрж╛:*

`, found = false;
  for (const key in data) {
    if (data[key].Blood === bloodGroup) {
      found = true;
      result += `ЁЯСд ${data[key].Name}\nЁЯУЮ ${data[key].Phone}\nЁЯУН ${data[key].Address}\n\n`;
    }
  }
  if (!found) result = `тЭМ ${bloodGroup} ржЧрзНрж░рзБржкрзЗрж░ ржХрзЛржи рждржерзНржп ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред`;
  bot.sendMessage(chatId, result, { parse_mode: 'Markdown' });
});

const generateList = async (ref, title, formatter) => {
  const snapshot = await db.ref(ref).once('value');
  const data = snapshot.val();
  let text = `ЁЯУЛ *${title} рждрж╛рж▓рж┐ржХрж╛:*

`;
  for (const key in data) text += formatter(data[key]);
  return text;
};

bot.onText(/\/ambulance/, async (msg) => {
  const text = await generateList('Ambulance', 'ржПржорзНржмрзБрж▓рзЗржирзНрж╕', d => `ЁЯЪС ${d.Name}\nЁЯУЮ ${d.Phone}\nЁЯУН ${d.Address}\n\n`);
  bot.sendMessage(msg.chat.id, text, { parse_mode: 'Markdown' });
});

bot.onText(/\/hospital/, async (msg) => {
  const text = await generateList('Hospital', 'рж╣рж╛рж╕ржкрж╛рждрж╛рж▓ ржУ ржХрзНрж▓рж┐ржирж┐ржХ', d => `ЁЯПе ${d.Name}\nЁЯУЮ ${d.Phone}\nЁЯУН ${d.Address}\n\n`);
  bot.sendMessage(msg.chat.id, text, { parse_mode: 'Markdown' });
});

bot.onText(/\/doctor/, async (msg) => {
  const text = await generateList('Doctor', 'ржбрж╛ржХрзНрждрж╛рж░рзЗрж░ рждржерзНржп', d => `ЁЯСитАНтЪХя╕П ${d.Name}\nЁЯУЮ ${d.Phone}\nЁЯПе ${d.Mbbs}\n\n`);
  bot.sendMessage(msg.chat.id, text, { parse_mode: 'Markdown' });
});

bot.onText(/\/police/, async (msg) => {
  const text = await generateList('Police', 'ржкрзБрж▓рж┐рж╢ рж╣ржЯрж▓рж╛ржЗржи', d => `ЁЯСо ${d.Name}\nЁЯУЮ ${d.Phone}\nЁЯУН ${d.Address}\n\n`);
  bot.sendMessage(msg.chat.id, text, { parse_mode: 'Markdown' });
});

bot.onText(/\/fire/, async (msg) => {
  const text = await generateList('Firefighter', 'ржлрж╛рзЯрж╛рж░ рж╕рж╛рж░рзНржнрж┐рж╕', d => `ЁЯФе ${d.Name}\nЁЯУЮ ${d.Phone}\nЁЯУН ${d.Address}\n\n`);
  bot.sendMessage(msg.chat.id, text, { parse_mode: 'Markdown' });
});

bot.onText(/\/delivery/, async (msg) => {
  const text = await generateList('Delivery', 'ржХрзБрж░рж┐рзЯрж╛рж░ рж╕рж╛рж░рзНржнрж┐рж╕', d => `ЁЯУж ${d.Name}\nЁЯУЮ ${d.Phone}\nЁЯУН ${d.Address}\n\n`);
  bot.sendMessage(msg.chat.id, text, { parse_mode: 'Markdown' });
});

bot.onText(/\/restaurant/, async (msg) => {
  const text = await generateList('Restaurant', 'рж░рзЗрж╕рзНржЯрзБрж░рзЗржирзНржЯ', d => `ЁЯН┤ ${d.Name}\nЁЯУЮ ${d.Phone}\nЁЯУН ${d.Address}\n\n`);
  bot.sendMessage(msg.chat.id, text, { parse_mode: 'Markdown' });
});

bot.onText(/\/pharmacy/, async (msg) => {
  const text = await generateList('Pharmacy', 'ржлрж╛рж░рзНржорзЗрж╕рзА', d => `ЁЯТК ${d.Name}\nЁЯУЮ ${d.Phone}\nЁЯУН ${d.Address}\n\n`);
  bot.sendMessage(msg.chat.id, text, { parse_mode: 'Markdown' });
});

bot.onText(/\/electricity/, async (msg) => {
  const text = await generateList('Electricity', 'ржмрж┐ржжрзНржпрзБрзО ржЕржлрж┐рж╕', d => `тЪб ${d.Name}\nЁЯУЮ ${d.Phone}\nЁЯУН ${d.Address}\n\n`);
  bot.sendMessage(msg.chat.id, text, { parse_mode: 'Markdown' });
});


// /notice command (read from Firebase 'Notice' node)
bot.onText(/\/notice/, async (msg) => {
  const chatId = msg.chat.id;
  const snapshot = await db.ref('Notice').once('value');
  const data = snapshot.val();

  if (!data) return bot.sendMessage(chatId, 'ЁЯУв ржмрж░рзНрждржорж╛ржирзЗ ржХрзЛржирзЛ ржирзЛржЯрж┐рж╢ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред');

  let text = 'ЁЯУв *рж╕рж╛ржорзНржкрзНрж░рждрж┐ржХ ржирзЛржЯрж┐рж╢:*

';
  for (const key in data) {
    text += `ЁЯУЭ ${data[key].title || 'рж╢рж┐рж░рзЛржирж╛ржо ржирзЗржЗ'}\n${data[key].message || ''}\nЁЯУЕ ${data[key].date || ''}\n\n`;
  }

  bot.sendMessage(chatId, text, { parse_mode: 'Markdown' });
});

// /admin command (only for admin users)
const adminIDs = ['7790579006']; // Replace with your Telegram user ID

bot.onText(/\/admin/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();

  if (!adminIDs.includes(userId)) {
    return bot.sendMessage(chatId, 'тЭМ ржЖржкржирж┐ ржПржЗ ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржЕржирзБржорждрж┐ ржкрж╛ржиржирж┐ред');
  }

  const text = `ЁЯЫая╕П ржЕрзНржпрж╛ржбржорж┐ржи ржЕржкрж╢ржирж╕ржорзВрж╣:
/notice тЮд рж╕рж░рзНржмрж╢рзЗрж╖ ржирзЛржЯрж┐рж╢ ржжрзЗржЦрзБржи
(ржнржмрж┐рж╖рзНржпрждрзЗ ржПржб, ржбрж┐рж▓рж┐ржЯ ржЕржкрж╢ржи ржпрзБржХрзНржд рж╣ржмрзЗ)`;

  bot.sendMessage(chatId, text);
});


// Admin: /admin addnotice <title>|<message>|<date>
bot.onText(/\/admin addnotice (.+)/, async (msg, match) => {
  const userId = msg.from.id.toString();
  if (!adminIDs.includes(userId)) {
    return bot.sendMessage(msg.chat.id, 'тЭМ ржЖржкржирж┐ ржПржЗ ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржЕржирзБржорждрж┐ ржкрж╛ржиржирж┐ред');
  }

  const parts = match[1].split('|');
  if (parts.length < 3) {
    return bot.sendMessage(msg.chat.id, 'тЪая╕П рж╕ржарж┐ржХ ржлрж░ржорзНржпрж╛ржЯ: /admin addnotice рж╢рж┐рж░рзЛржирж╛ржо|ржмрж╛рж░рзНрждрж╛|рждрж╛рж░рж┐ржЦ');
  }

  const [title, message, date] = parts.map(p => p.trim());
  const newRef = db.ref('Notice').push();
  await newRef.set({ title, message, date });

  bot.sendMessage(msg.chat.id, 'тЬЕ ржирждрзБржи ржирзЛржЯрж┐рж╢ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред');
});

// Admin: /admin deletenotice <id>
bot.onText(/\/admin deletenotice (.+)/, async (msg, match) => {
  const userId = msg.from.id.toString();
  if (!adminIDs.includes(userId)) {
    return bot.sendMessage(msg.chat.id, 'тЭМ ржЖржкржирж┐ ржПржЗ ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржЕржирзБржорждрж┐ ржкрж╛ржиржирж┐ред');
  }

  const noticeId = match[1].trim();
  try {
    await db.ref(`Notice/${noticeId}`).remove();
    bot.sendMessage(msg.chat.id, `ЁЯЧСя╕П ржирзЛржЯрж┐рж╢ ${noticeId} ржбрж┐рж▓рж┐ржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред`);
  } catch (error) {
    bot.sendMessage(msg.chat.id, `тЭМ ржбрж┐рж▓рж┐ржЯ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗ: ${error.message}`);
  }
});
